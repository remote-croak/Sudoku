package sodoku

import (
	"github.com/hajimehoshi/ebiten/v2"
	"github.com/hajimehoshi/ebiten/v2/ebitenutil"
	"fmt"
)
const (
prisonSize = 3
)

type Game struct {

	prison *Prison
	prisonImage *ebiten.Image
	mousex int
	mousey int
}

func NewGame() (*Game, error) {
	g := &Game{
		mousex: 0,
		mousey: 0,
		//input: NewInput(),
	}

	var err error
	g.prison, err = NewPrison(96, 3, 4)

	if err != nil {
		return nil, err
	}
	return g, nil
}

func (g *Game) Update() error {
	if ebiten.IsMouseButtonPressed(ebiten.MouseButtonLeft){
		dx, dy := ebiten.CursorPosition()
		g.mousex = dx
		g.mousey = dy
		if (dx > g.prison.CellMinX() && dx < g.prison.CellMaxX() && dy > g.prison.CellMinY() && dy < g.prison.CellMaxY()){

		ebitenutil.DebugPrint(cellImage, fmt.Sprintf("%d, %3d", pos,pos))
		}
	return nil
}

func (g *Game) Layout(outsideWidth int, outsideHeight int) (int, int){
	return 1920, 1080
	}


func (g *Game) Draw(screen *ebiten.Image) {
	
	screen.Fill(backgroundColour)
	ebitenutil.DebugPrint(screen, fmt.Sprintf("%d,%d",g.mousex, g.mousey))
	ebitenutil.DebugPrintAt(screen, "Sodoku", 0,1000)
	if g.prisonImage == nil {
		g.prisonImage = ebiten.NewImage(1024,1024)
	}
	
//	screen.Fill(backgroundColour)
	g.prison.Draw(g.prisonImage)
	op := &ebiten.DrawImageOptions{}
	sw, sh := screen.Bounds().Dx(), screen.Bounds().Dy()
	bw, bh := g.prisonImage.Bounds().Dx(), g.prisonImage.Bounds().Dy()
	x := (sw - bw)/2
	y := (sh - bh)/2
	g.prison.AddPos(x, y)
	ebitenutil.DebugPrintAt(screen, fmt.Sprintf("Prison Origin from Prison: %d,%d", g.prison.ShowPosX(), g.prison.ShowPosY()), 0, 400)
	op.GeoM.Translate(float64(x), float64(y))
	screen.DrawImage(g.prisonImage, op)
	ebitenutil.DebugPrintAt(screen, fmt.Sprintf("Prison Origin from World: %d,%d", x, y), 0, 500)	
}
